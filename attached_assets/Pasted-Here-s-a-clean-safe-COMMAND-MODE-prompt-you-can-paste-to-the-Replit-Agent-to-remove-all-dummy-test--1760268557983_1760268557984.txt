Here’s a clean, safe COMMAND-MODE prompt you can paste to the Replit Agent to remove all dummy/test data the agent created, while preserving your own items. It does a dry-run first, shows exactly what will be deleted (grouped by owner), then performs the cleanup (DB rows + uploaded files) and verifies the homepage.

⸻

[COMMAND MODE] – Purge agent-created dummy data (listings + room seekers) and keep owner’s real items

Goal
Delete all dummy/test content (room listings, room-seeker profiles, related images, favorites, messages) that was generated by the agent or seeders. Keep only items that belong to my real accounts. After cleanup, verify that the homepage shows only my real data or healthy empty states.

⸻

0) Safety & scope
	•	Work only against the current environment database that the app uses in Preview/Production (whichever Preview is pointing to right now).
	•	Take a quick DB snapshot/backup and note the file path in the task log.
	•	Do not delete user accounts; only their content (unless they’re obvious auto/agent accounts).

⸻

1) Identify what to keep vs delete

Create a dry-run script (server/scripts/cleanup-dry-run.ts) that lists candidates to delete, grouped by owner:
	•	KEEP if the owner’s email is in the whitelist:
	•	admin@odanet.com.tr
	•	any email on the @odanet.com.tr domain
	•	(plus: if you see my current logged-in user in the DB, add that email to the whitelist)
	•	DELETE everything else that looks agent/seed/test, including:
	•	Listings with “Odanet” logo image as main photo
	•	Obvious fake names in seekers (e.g., “Ayşe Y.”, “Mehmet D.”, “Zeynep K.”)
	•	Owner emails that look auto-generated or non-whitelisted
	•	Any listing/seekers created by seed, demo, test, or replit accounts
	•	Show in the dry-run output for each item:
	•	type: listing or seeker
	•	id, title/name, owner email, createdAt
	•	linked images count and file paths (from /uploads)
	•	any dependent rows that will be deleted (favorites, messages/threads)

Acceptance (dry-run): I can see a concise table summarizing the counts per owner and a final total to be deleted. Proceed automatically to deletion (no extra prompt) if nothing in KEEP appears in the delete set.

⸻

2) Execute cleanup

Implement server/scripts/cleanup-execute.ts that:
	•	Deletes in the right order to maintain FK integrity:
	1.	favorites referencing those listing ids
	2.	messages/threads referencing those ids (if applicable)
	3.	listing_images (or equivalent relation)
	4.	seekers’ related rows (if any)
	5.	listings rows
	6.	seeker_profiles rows
	•	Removes related uploaded files in /uploads/** for deleted records (primary and non-primary photos). Skip file removal if path doesn’t exist.
	•	Resets any affected sequences if needed (Drizzle/SQL).
	•	Clears caches so homepage fetches fresh data.

Acceptance (execute): Show a summary: counts removed by table + the list of files deleted from /uploads. Keep the earlier backup note handy.

⸻

3) Wire a one-liner to run

Add npm scripts:

"scripts": {
  "cleanup:dry": "tsx server/scripts/cleanup-dry-run.ts",
  "cleanup:run": "tsx server/scripts/cleanup-execute.ts"
}

Run both and include their outputs in the task log.

⸻

4) Verify app health
	•	Start the app in Preview and confirm:
	•	Homepage featured listings and Oda Arayanlar now show only my real content; if empty, show proper empty state UI (no errors).
	•	Listing detail “Aramaya Geri Dön” navigates back to the correct Turkish route (no 404).
	•	Sign-in / Sign-up buttons work and remain visible (no auto-hide).
	•	Add a lightweight endpoint /api/health returning { ok: true, version, env } and check it.

⸻

5) Deliverables
	•	✅ Dry-run table in logs (owners + counts, totals)
	•	✅ Cleanup summary (rows removed per table + files deleted)
	•	✅ Path to DB snapshot/backup
	•	✅ Confirmation screenshots of homepage (listings + Oda Arayanlar), and a working back link on listing detail
	•	✅ cleanup:dry and cleanup:run scripts in package.json
	•	✅ /api/health returns ok: true

Notes
	•	If you find any items that look ambiguous (could be mine), default to KEEP and list them under an “Ambiguous (kept)” section in the dry-run output—the rest should still be deleted.
	•	Do not change routes or UI beyond empty-state handling. This task is strictly data cleanup + health checks.

Proceed now.